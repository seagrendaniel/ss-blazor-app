@page "/"
@inject ProductService ProductService

@using ssCRUDapp.Shared
@using ssCRUDapp.Client.Services

<h3>Product List</h3>

<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Quantity</th>
            <th>Price</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var product in products)
        {
            <tr>
                <td>@product.Name</td>
                <td>@product.Quantity</td>
                <td>@product.Price.ToString("C")</td>
            </tr>
        }
    </tbody>
</table>

<h3>Add a Product</h3>

<EditForm Model="newProduct" OnValidSubmit="HandleValidSubmit">
    <div class="form-group">
        <label>Name</label>
        <InputText @bind-Value="newProduct.Name" class="form-control" />
    </div>
    <div class="form-group">
        <label>Quantity</label>
        <InputNumber @bind-Value="newProduct.Quantity" class="form-control" />
    </div>
    <div class="form-group">
        <label>Price</label>
        <InputNumber @bind-Value="newProduct.Price" class="form-control" />
    </div>
    <button type="submit" class="btn btn-primary">Add Product</button>
</EditForm>

@code {
    private List<Product> products = new();
    private Product newProduct = new();

    protected override async Task OnInitializedAsync()
    {
        products = await ProductService.GetProductsAsync();
    }

    private async Task HandleValidSubmit()
    {
        await ProductService.CreateProductAsync(newProduct);
        products = await ProductService.GetProductsAsync(); // Reload the product list
        newProduct = new Product(); // Reset the form
    }
}
